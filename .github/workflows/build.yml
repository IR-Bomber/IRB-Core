name: Build

on: 
  workflow_call:

env:
  name: "IBCore"

jobs: 
  test:
    name: Run Go Tests
    runs-on: ${{ matrix.os }}

    permissions:
      contents: read  # Minimal required permissions

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: [1.22]
        arch: [amd64, arm64]  # Add support for multiple architectures

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Verify Go installation
        run: go version

      - name: Set up Docker
        uses: docker/setup-docker-action@v4
        if: runner.os != 'Windows'

      - name: Run Go tests (Linux/MacOS) inside Docker
        run: |
          docker run --rm -v $PWD:/go/src/github.com/M-logique/Iran-Bomber-Core -w /go/src/github.com/M-logique/Iran-Bomber-Core golang:1.22 bash -c "GOARCH=${{ matrix.arch }} go mod tidy && go test ./... -v"
        if: runner.os != 'Windows'

      - name: Run Go tests (Windows)
        run: |
          set GOARCH=${{ matrix.arch }}
          go mod tidy
          go test ./... -v
        if: runner.os == 'Windows'


    
  build:
    needs: test
    name: Build Go binaries
    runs-on: ${{ matrix.os }}

    permissions:
      contents: read  # Minimal required permissions

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: [1.22]
        arch: [amd64, arm64]  # Add support for multiple architectures

    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Verify Go installation
        run: go version

      - name: Build binary for ${{ matrix.arch }} (Linux/MacOS)
        run: |
          export GOARCH=${{ matrix.arch }} 
          go mod tidy
          go build -v -buildmode=c-archive -o ${{ env.name }}-${{ matrix.os }}-${{ matrix.arch }}.a .
        if: runner.os != 'Windows'
      
      - name: Build binary for ${{ matrix.arch }} (Windows)
        run: |
          set GOARCH=${{ matrix.arch }} 
          go mod tidy
          go build -v -buildmode=c-archive -o ${{ env.name }}-${{ matrix.os }}-${{ matrix.arch }}.a .
        if: runner.os == 'Windows'


      - name: Move binaries to dist (Linux/macOS)
        run: |
          mkdir -p dist/
          mv ${{ env.name }}-${{ matrix.os }}-${{ matrix.arch }}.* dist/
        if: runner.os != 'Windows'

      - name: Move binaries to dist (Windows)
        run: |
          mkdir dist
          move ${{ env.name }}-${{ matrix.os }}-${{ matrix.arch }}.* dist\
        if: runner.os == 'Windows'

      - name: List output files (Linux/macOS)
        run: ls -lah dist/
        if: runner.os != 'Windows'

      - name: List output files (Windows)
        run: dir dist\
        if: runner.os == 'Windows'

      - name: Upload Binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.name }}-${{ matrix.os }}-${{ matrix.arch }}.bin
          path: dist/
